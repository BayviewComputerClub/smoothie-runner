// Code generated by protoc-gen-go. DO NOT EDIT.
// source: runner/smoothie-runner.proto

package smoothie_runner

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_f6cd65c4d0588d75, []int{0}
}

func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

type ProblemTestDataHashRequest struct {
	ProblemId            string   `protobuf:"bytes,1,opt,name=problemId,proto3" json:"problemId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProblemTestDataHashRequest) Reset()         { *m = ProblemTestDataHashRequest{} }
func (m *ProblemTestDataHashRequest) String() string { return proto.CompactTextString(m) }
func (*ProblemTestDataHashRequest) ProtoMessage()    {}
func (*ProblemTestDataHashRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f6cd65c4d0588d75, []int{1}
}

func (m *ProblemTestDataHashRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProblemTestDataHashRequest.Unmarshal(m, b)
}
func (m *ProblemTestDataHashRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProblemTestDataHashRequest.Marshal(b, m, deterministic)
}
func (m *ProblemTestDataHashRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProblemTestDataHashRequest.Merge(m, src)
}
func (m *ProblemTestDataHashRequest) XXX_Size() int {
	return xxx_messageInfo_ProblemTestDataHashRequest.Size(m)
}
func (m *ProblemTestDataHashRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ProblemTestDataHashRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ProblemTestDataHashRequest proto.InternalMessageInfo

func (m *ProblemTestDataHashRequest) GetProblemId() string {
	if m != nil {
		return m.ProblemId
	}
	return ""
}

type ProblemTestDataHashResponse struct {
	Hash                 string   `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProblemTestDataHashResponse) Reset()         { *m = ProblemTestDataHashResponse{} }
func (m *ProblemTestDataHashResponse) String() string { return proto.CompactTextString(m) }
func (*ProblemTestDataHashResponse) ProtoMessage()    {}
func (*ProblemTestDataHashResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f6cd65c4d0588d75, []int{2}
}

func (m *ProblemTestDataHashResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProblemTestDataHashResponse.Unmarshal(m, b)
}
func (m *ProblemTestDataHashResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProblemTestDataHashResponse.Marshal(b, m, deterministic)
}
func (m *ProblemTestDataHashResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProblemTestDataHashResponse.Merge(m, src)
}
func (m *ProblemTestDataHashResponse) XXX_Size() int {
	return xxx_messageInfo_ProblemTestDataHashResponse.Size(m)
}
func (m *ProblemTestDataHashResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ProblemTestDataHashResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ProblemTestDataHashResponse proto.InternalMessageInfo

func (m *ProblemTestDataHashResponse) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

type UploadTestDataRequest struct {
	DataChunk            []byte   `protobuf:"bytes,1,opt,name=dataChunk,proto3" json:"dataChunk,omitempty"`
	ProblemId            string   `protobuf:"bytes,2,opt,name=problemId,proto3" json:"problemId,omitempty"`
	TestDataHash         string   `protobuf:"bytes,3,opt,name=testDataHash,proto3" json:"testDataHash,omitempty"`
	FinishedUploading    bool     `protobuf:"varint,4,opt,name=finishedUploading,proto3" json:"finishedUploading,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UploadTestDataRequest) Reset()         { *m = UploadTestDataRequest{} }
func (m *UploadTestDataRequest) String() string { return proto.CompactTextString(m) }
func (*UploadTestDataRequest) ProtoMessage()    {}
func (*UploadTestDataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f6cd65c4d0588d75, []int{3}
}

func (m *UploadTestDataRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UploadTestDataRequest.Unmarshal(m, b)
}
func (m *UploadTestDataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UploadTestDataRequest.Marshal(b, m, deterministic)
}
func (m *UploadTestDataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UploadTestDataRequest.Merge(m, src)
}
func (m *UploadTestDataRequest) XXX_Size() int {
	return xxx_messageInfo_UploadTestDataRequest.Size(m)
}
func (m *UploadTestDataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UploadTestDataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UploadTestDataRequest proto.InternalMessageInfo

func (m *UploadTestDataRequest) GetDataChunk() []byte {
	if m != nil {
		return m.DataChunk
	}
	return nil
}

func (m *UploadTestDataRequest) GetProblemId() string {
	if m != nil {
		return m.ProblemId
	}
	return ""
}

func (m *UploadTestDataRequest) GetTestDataHash() string {
	if m != nil {
		return m.TestDataHash
	}
	return ""
}

func (m *UploadTestDataRequest) GetFinishedUploading() bool {
	if m != nil {
		return m.FinishedUploading
	}
	return false
}

type UploadTestDataResponse struct {
	Error                string   `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UploadTestDataResponse) Reset()         { *m = UploadTestDataResponse{} }
func (m *UploadTestDataResponse) String() string { return proto.CompactTextString(m) }
func (*UploadTestDataResponse) ProtoMessage()    {}
func (*UploadTestDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f6cd65c4d0588d75, []int{4}
}

func (m *UploadTestDataResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UploadTestDataResponse.Unmarshal(m, b)
}
func (m *UploadTestDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UploadTestDataResponse.Marshal(b, m, deterministic)
}
func (m *UploadTestDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UploadTestDataResponse.Merge(m, src)
}
func (m *UploadTestDataResponse) XXX_Size() int {
	return xxx_messageInfo_UploadTestDataResponse.Size(m)
}
func (m *UploadTestDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UploadTestDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UploadTestDataResponse proto.InternalMessageInfo

func (m *UploadTestDataResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type ServiceHealth struct {
	NumOfTasksToBeDone   uint64   `protobuf:"varint,1,opt,name=numOfTasksToBeDone,proto3" json:"numOfTasksToBeDone,omitempty"`
	NumOfTasksInQueue    uint64   `protobuf:"varint,2,opt,name=numOfTasksInQueue,proto3" json:"numOfTasksInQueue,omitempty"`
	NumOfWorkers         uint64   `protobuf:"varint,3,opt,name=numOfWorkers,proto3" json:"numOfWorkers,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ServiceHealth) Reset()         { *m = ServiceHealth{} }
func (m *ServiceHealth) String() string { return proto.CompactTextString(m) }
func (*ServiceHealth) ProtoMessage()    {}
func (*ServiceHealth) Descriptor() ([]byte, []int) {
	return fileDescriptor_f6cd65c4d0588d75, []int{5}
}

func (m *ServiceHealth) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServiceHealth.Unmarshal(m, b)
}
func (m *ServiceHealth) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServiceHealth.Marshal(b, m, deterministic)
}
func (m *ServiceHealth) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceHealth.Merge(m, src)
}
func (m *ServiceHealth) XXX_Size() int {
	return xxx_messageInfo_ServiceHealth.Size(m)
}
func (m *ServiceHealth) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceHealth.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceHealth proto.InternalMessageInfo

func (m *ServiceHealth) GetNumOfTasksToBeDone() uint64 {
	if m != nil {
		return m.NumOfTasksToBeDone
	}
	return 0
}

func (m *ServiceHealth) GetNumOfTasksInQueue() uint64 {
	if m != nil {
		return m.NumOfTasksInQueue
	}
	return 0
}

func (m *ServiceHealth) GetNumOfWorkers() uint64 {
	if m != nil {
		return m.NumOfWorkers
	}
	return 0
}

type TestSolutionRequest struct {
	Problem               *Problem  `protobuf:"bytes,1,opt,name=problem,proto3" json:"problem,omitempty"`
	Solution              *Solution `protobuf:"bytes,2,opt,name=solution,proto3" json:"solution,omitempty"`
	TestBatchEvenIfFailed bool      `protobuf:"varint,3,opt,name=testBatchEvenIfFailed,proto3" json:"testBatchEvenIfFailed,omitempty"`
	CancelTesting         bool      `protobuf:"varint,4,opt,name=cancelTesting,proto3" json:"cancelTesting,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}  `json:"-"`
	XXX_unrecognized      []byte    `json:"-"`
	XXX_sizecache         int32     `json:"-"`
}

func (m *TestSolutionRequest) Reset()         { *m = TestSolutionRequest{} }
func (m *TestSolutionRequest) String() string { return proto.CompactTextString(m) }
func (*TestSolutionRequest) ProtoMessage()    {}
func (*TestSolutionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f6cd65c4d0588d75, []int{6}
}

func (m *TestSolutionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TestSolutionRequest.Unmarshal(m, b)
}
func (m *TestSolutionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TestSolutionRequest.Marshal(b, m, deterministic)
}
func (m *TestSolutionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestSolutionRequest.Merge(m, src)
}
func (m *TestSolutionRequest) XXX_Size() int {
	return xxx_messageInfo_TestSolutionRequest.Size(m)
}
func (m *TestSolutionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TestSolutionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TestSolutionRequest proto.InternalMessageInfo

func (m *TestSolutionRequest) GetProblem() *Problem {
	if m != nil {
		return m.Problem
	}
	return nil
}

func (m *TestSolutionRequest) GetSolution() *Solution {
	if m != nil {
		return m.Solution
	}
	return nil
}

func (m *TestSolutionRequest) GetTestBatchEvenIfFailed() bool {
	if m != nil {
		return m.TestBatchEvenIfFailed
	}
	return false
}

func (m *TestSolutionRequest) GetCancelTesting() bool {
	if m != nil {
		return m.CancelTesting
	}
	return false
}

type Solution struct {
	Language             string   `protobuf:"bytes,1,opt,name=language,proto3" json:"language,omitempty"`
	Code                 string   `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Solution) Reset()         { *m = Solution{} }
func (m *Solution) String() string { return proto.CompactTextString(m) }
func (*Solution) ProtoMessage()    {}
func (*Solution) Descriptor() ([]byte, []int) {
	return fileDescriptor_f6cd65c4d0588d75, []int{7}
}

func (m *Solution) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Solution.Unmarshal(m, b)
}
func (m *Solution) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Solution.Marshal(b, m, deterministic)
}
func (m *Solution) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Solution.Merge(m, src)
}
func (m *Solution) XXX_Size() int {
	return xxx_messageInfo_Solution.Size(m)
}
func (m *Solution) XXX_DiscardUnknown() {
	xxx_messageInfo_Solution.DiscardUnknown(m)
}

var xxx_messageInfo_Solution proto.InternalMessageInfo

func (m *Solution) GetLanguage() string {
	if m != nil {
		return m.Language
	}
	return ""
}

func (m *Solution) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

type Problem struct {
	ProblemId            string         `protobuf:"bytes,1,opt,name=problemId,proto3" json:"problemId,omitempty"`
	TestDataHash         string         `protobuf:"bytes,2,opt,name=testDataHash,proto3" json:"testDataHash,omitempty"`
	Grader               *ProblemGrader `protobuf:"bytes,3,opt,name=grader,proto3" json:"grader,omitempty"`
	TimeLimit            float64        `protobuf:"fixed64,4,opt,name=timeLimit,proto3" json:"timeLimit,omitempty"`
	MemLimit             float64        `protobuf:"fixed64,5,opt,name=memLimit,proto3" json:"memLimit,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *Problem) Reset()         { *m = Problem{} }
func (m *Problem) String() string { return proto.CompactTextString(m) }
func (*Problem) ProtoMessage()    {}
func (*Problem) Descriptor() ([]byte, []int) {
	return fileDescriptor_f6cd65c4d0588d75, []int{8}
}

func (m *Problem) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Problem.Unmarshal(m, b)
}
func (m *Problem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Problem.Marshal(b, m, deterministic)
}
func (m *Problem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Problem.Merge(m, src)
}
func (m *Problem) XXX_Size() int {
	return xxx_messageInfo_Problem.Size(m)
}
func (m *Problem) XXX_DiscardUnknown() {
	xxx_messageInfo_Problem.DiscardUnknown(m)
}

var xxx_messageInfo_Problem proto.InternalMessageInfo

func (m *Problem) GetProblemId() string {
	if m != nil {
		return m.ProblemId
	}
	return ""
}

func (m *Problem) GetTestDataHash() string {
	if m != nil {
		return m.TestDataHash
	}
	return ""
}

func (m *Problem) GetGrader() *ProblemGrader {
	if m != nil {
		return m.Grader
	}
	return nil
}

func (m *Problem) GetTimeLimit() float64 {
	if m != nil {
		return m.TimeLimit
	}
	return 0
}

func (m *Problem) GetMemLimit() float64 {
	if m != nil {
		return m.MemLimit
	}
	return 0
}

type ProblemGrader struct {
	Type                 string   `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	CustomCode           string   `protobuf:"bytes,2,opt,name=customCode,proto3" json:"customCode,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProblemGrader) Reset()         { *m = ProblemGrader{} }
func (m *ProblemGrader) String() string { return proto.CompactTextString(m) }
func (*ProblemGrader) ProtoMessage()    {}
func (*ProblemGrader) Descriptor() ([]byte, []int) {
	return fileDescriptor_f6cd65c4d0588d75, []int{9}
}

func (m *ProblemGrader) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProblemGrader.Unmarshal(m, b)
}
func (m *ProblemGrader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProblemGrader.Marshal(b, m, deterministic)
}
func (m *ProblemGrader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProblemGrader.Merge(m, src)
}
func (m *ProblemGrader) XXX_Size() int {
	return xxx_messageInfo_ProblemGrader.Size(m)
}
func (m *ProblemGrader) XXX_DiscardUnknown() {
	xxx_messageInfo_ProblemGrader.DiscardUnknown(m)
}

var xxx_messageInfo_ProblemGrader proto.InternalMessageInfo

func (m *ProblemGrader) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *ProblemGrader) GetCustomCode() string {
	if m != nil {
		return m.CustomCode
	}
	return ""
}

type TestSolutionResponse struct {
	TestCaseResult       *TestCaseResult `protobuf:"bytes,1,opt,name=testCaseResult,proto3" json:"testCaseResult,omitempty"`
	CompletedTesting     bool            `protobuf:"varint,2,opt,name=completedTesting,proto3" json:"completedTesting,omitempty"`
	CompileError         string          `protobuf:"bytes,3,opt,name=compileError,proto3" json:"compileError,omitempty"`
	TestDataNeedUpload   bool            `protobuf:"varint,4,opt,name=testDataNeedUpload,proto3" json:"testDataNeedUpload,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *TestSolutionResponse) Reset()         { *m = TestSolutionResponse{} }
func (m *TestSolutionResponse) String() string { return proto.CompactTextString(m) }
func (*TestSolutionResponse) ProtoMessage()    {}
func (*TestSolutionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f6cd65c4d0588d75, []int{10}
}

func (m *TestSolutionResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TestSolutionResponse.Unmarshal(m, b)
}
func (m *TestSolutionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TestSolutionResponse.Marshal(b, m, deterministic)
}
func (m *TestSolutionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestSolutionResponse.Merge(m, src)
}
func (m *TestSolutionResponse) XXX_Size() int {
	return xxx_messageInfo_TestSolutionResponse.Size(m)
}
func (m *TestSolutionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TestSolutionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TestSolutionResponse proto.InternalMessageInfo

func (m *TestSolutionResponse) GetTestCaseResult() *TestCaseResult {
	if m != nil {
		return m.TestCaseResult
	}
	return nil
}

func (m *TestSolutionResponse) GetCompletedTesting() bool {
	if m != nil {
		return m.CompletedTesting
	}
	return false
}

func (m *TestSolutionResponse) GetCompileError() string {
	if m != nil {
		return m.CompileError
	}
	return ""
}

func (m *TestSolutionResponse) GetTestDataNeedUpload() bool {
	if m != nil {
		return m.TestDataNeedUpload
	}
	return false
}

type TestCaseResult struct {
	BatchNumber          uint64   `protobuf:"varint,1,opt,name=batchNumber,proto3" json:"batchNumber,omitempty"`
	CaseNumber           uint64   `protobuf:"varint,2,opt,name=caseNumber,proto3" json:"caseNumber,omitempty"`
	Result               string   `protobuf:"bytes,3,opt,name=result,proto3" json:"result,omitempty"`
	ResultInfo           string   `protobuf:"bytes,4,opt,name=resultInfo,proto3" json:"resultInfo,omitempty"`
	Time                 float64  `protobuf:"fixed64,5,opt,name=time,proto3" json:"time,omitempty"`
	MemUsage             float64  `protobuf:"fixed64,6,opt,name=memUsage,proto3" json:"memUsage,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TestCaseResult) Reset()         { *m = TestCaseResult{} }
func (m *TestCaseResult) String() string { return proto.CompactTextString(m) }
func (*TestCaseResult) ProtoMessage()    {}
func (*TestCaseResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_f6cd65c4d0588d75, []int{11}
}

func (m *TestCaseResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TestCaseResult.Unmarshal(m, b)
}
func (m *TestCaseResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TestCaseResult.Marshal(b, m, deterministic)
}
func (m *TestCaseResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestCaseResult.Merge(m, src)
}
func (m *TestCaseResult) XXX_Size() int {
	return xxx_messageInfo_TestCaseResult.Size(m)
}
func (m *TestCaseResult) XXX_DiscardUnknown() {
	xxx_messageInfo_TestCaseResult.DiscardUnknown(m)
}

var xxx_messageInfo_TestCaseResult proto.InternalMessageInfo

func (m *TestCaseResult) GetBatchNumber() uint64 {
	if m != nil {
		return m.BatchNumber
	}
	return 0
}

func (m *TestCaseResult) GetCaseNumber() uint64 {
	if m != nil {
		return m.CaseNumber
	}
	return 0
}

func (m *TestCaseResult) GetResult() string {
	if m != nil {
		return m.Result
	}
	return ""
}

func (m *TestCaseResult) GetResultInfo() string {
	if m != nil {
		return m.ResultInfo
	}
	return ""
}

func (m *TestCaseResult) GetTime() float64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *TestCaseResult) GetMemUsage() float64 {
	if m != nil {
		return m.MemUsage
	}
	return 0
}

func init() {
	proto.RegisterType((*Empty)(nil), "Empty")
	proto.RegisterType((*ProblemTestDataHashRequest)(nil), "ProblemTestDataHashRequest")
	proto.RegisterType((*ProblemTestDataHashResponse)(nil), "ProblemTestDataHashResponse")
	proto.RegisterType((*UploadTestDataRequest)(nil), "UploadTestDataRequest")
	proto.RegisterType((*UploadTestDataResponse)(nil), "UploadTestDataResponse")
	proto.RegisterType((*ServiceHealth)(nil), "ServiceHealth")
	proto.RegisterType((*TestSolutionRequest)(nil), "TestSolutionRequest")
	proto.RegisterType((*Solution)(nil), "Solution")
	proto.RegisterType((*Problem)(nil), "Problem")
	proto.RegisterType((*ProblemGrader)(nil), "ProblemGrader")
	proto.RegisterType((*TestSolutionResponse)(nil), "TestSolutionResponse")
	proto.RegisterType((*TestCaseResult)(nil), "TestCaseResult")
}

func init() { proto.RegisterFile("runner/smoothie-runner.proto", fileDescriptor_f6cd65c4d0588d75) }

var fileDescriptor_f6cd65c4d0588d75 = []byte{
	// 735 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x55, 0xdd, 0x4e, 0xdb, 0x4a,
	0x10, 0xc6, 0x39, 0x21, 0x24, 0x13, 0xc8, 0x39, 0xec, 0x81, 0x14, 0x05, 0x54, 0xa1, 0x55, 0x5b,
	0xa1, 0xaa, 0x75, 0xdb, 0xb4, 0x52, 0x25, 0xee, 0x20, 0x50, 0x88, 0x84, 0x28, 0x35, 0x41, 0xbd,
	0xde, 0xc4, 0x93, 0xd8, 0xc2, 0xf6, 0xa6, 0xde, 0x35, 0x12, 0x8f, 0xd1, 0x27, 0xe8, 0x55, 0x2f,
	0xfb, 0x02, 0x55, 0xdf, 0xa1, 0xaf, 0x54, 0xed, 0x7a, 0x9d, 0xd8, 0x89, 0xcb, 0xdd, 0xce, 0x37,
	0x3b, 0xde, 0xef, 0x9b, 0x3f, 0xc3, 0x5e, 0x9c, 0x44, 0x11, 0xc6, 0xaf, 0x44, 0xc8, 0xb9, 0xf4,
	0x7c, 0x7c, 0x99, 0xda, 0xf6, 0x34, 0xe6, 0x92, 0xd3, 0x35, 0x58, 0x3d, 0x0d, 0xa7, 0xf2, 0x9e,
	0x1e, 0x42, 0xe7, 0x2a, 0xe6, 0xc3, 0x00, 0xc3, 0x01, 0x0a, 0x79, 0xc2, 0x24, 0x3b, 0x67, 0xc2,
	0x73, 0xf0, 0x4b, 0x82, 0x42, 0x92, 0x3d, 0x68, 0x4c, 0x53, 0x6f, 0xdf, 0xdd, 0xb1, 0xf6, 0xad,
	0x83, 0x86, 0x33, 0x07, 0xe8, 0x1b, 0xd8, 0x2d, 0x8d, 0x15, 0x53, 0x1e, 0x09, 0x24, 0x04, 0xaa,
	0x1e, 0x13, 0x9e, 0x89, 0xd3, 0x67, 0xfa, 0xdd, 0x82, 0xed, 0x9b, 0x69, 0xc0, 0x99, 0x9b, 0x85,
	0xe4, 0x9e, 0x72, 0x99, 0x64, 0x3d, 0x2f, 0x89, 0x6e, 0x75, 0xc8, 0xba, 0x33, 0x07, 0x8a, 0x44,
	0x2a, 0x0b, 0x44, 0x08, 0x85, 0x75, 0x99, 0x63, 0xb0, 0xf3, 0x8f, 0xbe, 0x50, 0xc0, 0xc8, 0x0b,
	0xd8, 0x1c, 0xfb, 0x91, 0x2f, 0x3c, 0x74, 0x53, 0x02, 0x7e, 0x34, 0xd9, 0xa9, 0xee, 0x5b, 0x07,
	0x75, 0x67, 0xd9, 0x41, 0x6d, 0x68, 0x2f, 0xd2, 0x34, 0xaa, 0xb6, 0x60, 0x15, 0xe3, 0x98, 0xc7,
	0x46, 0x56, 0x6a, 0xd0, 0xaf, 0x16, 0x6c, 0x5c, 0x63, 0x7c, 0xe7, 0x8f, 0xf0, 0x1c, 0x59, 0x20,
	0x3d, 0x62, 0x03, 0x89, 0x92, 0xf0, 0xe3, 0x78, 0xc0, 0xc4, 0xad, 0x18, 0xf0, 0x63, 0x3c, 0xe1,
	0x11, 0xea, 0xa0, 0xaa, 0x53, 0xe2, 0x51, 0xfc, 0xe6, 0x68, 0x3f, 0xfa, 0x94, 0x60, 0x82, 0x5a,
	0x69, 0xd5, 0x59, 0x76, 0x28, 0xc5, 0x1a, 0xfc, 0xcc, 0xe3, 0x5b, 0x8c, 0x85, 0x56, 0x5c, 0x75,
	0x0a, 0x18, 0xfd, 0x65, 0xc1, 0xff, 0x8a, 0xfe, 0x35, 0x0f, 0x12, 0xe9, 0xf3, 0x28, 0xcb, 0x34,
	0x85, 0x35, 0x93, 0x3a, 0x4d, 0xa7, 0xd9, 0xad, 0xdb, 0xa6, 0x8c, 0x4e, 0xe6, 0x20, 0x4f, 0xa1,
	0x2e, 0x4c, 0x98, 0x26, 0xd1, 0xec, 0x36, 0xec, 0xd9, 0x77, 0x66, 0x2e, 0xf2, 0x0e, 0xb6, 0x55,
	0x92, 0x8f, 0x99, 0x1c, 0x79, 0xa7, 0x77, 0x18, 0xf5, 0xc7, 0x1f, 0x98, 0x1f, 0xa0, 0xab, 0xf9,
	0xd4, 0x9d, 0x72, 0x27, 0x79, 0x02, 0x1b, 0x23, 0x16, 0x8d, 0x30, 0x50, 0xec, 0xe6, 0x65, 0x28,
	0x82, 0xf4, 0x10, 0xea, 0xd9, 0x8b, 0xa4, 0x03, 0xf5, 0x80, 0x45, 0x93, 0x84, 0x4d, 0xd0, 0xe4,
	0x7d, 0x66, 0xab, 0x36, 0x1b, 0x71, 0x17, 0x4d, 0x57, 0xe8, 0x33, 0xfd, 0x61, 0xc1, 0x9a, 0xd1,
	0xf4, 0x70, 0x0f, 0x2f, 0xb5, 0x4e, 0xa5, 0xa4, 0x75, 0x9e, 0x41, 0x6d, 0x12, 0x33, 0x17, 0x63,
	0x2d, 0xab, 0xd9, 0x6d, 0x65, 0xf9, 0x3a, 0xd3, 0xa8, 0x63, 0xbc, 0xea, 0x25, 0xe9, 0x87, 0x78,
	0xe1, 0x87, 0xbe, 0xd4, 0x9a, 0x2c, 0x67, 0x0e, 0x28, 0x0d, 0x21, 0x86, 0xa9, 0x73, 0x55, 0x3b,
	0x67, 0x36, 0xed, 0xc1, 0x46, 0xe1, 0x93, 0x4a, 0x94, 0xbc, 0x9f, 0x66, 0x62, 0xf5, 0x99, 0x3c,
	0x06, 0x18, 0x25, 0x42, 0xf2, 0xb0, 0x37, 0x97, 0x9b, 0x43, 0xe8, 0x6f, 0x0b, 0xb6, 0x8a, 0xf5,
	0x36, 0x2d, 0xfb, 0x1e, 0x5a, 0x4a, 0x4f, 0x8f, 0x09, 0x74, 0x50, 0x24, 0x81, 0x34, 0x75, 0xff,
	0xd7, 0x1e, 0x14, 0x60, 0x67, 0xe1, 0x1a, 0x79, 0x0e, 0xff, 0x8d, 0x78, 0x38, 0x0d, 0x50, 0xa2,
	0x9b, 0xd5, 0xaa, 0xa2, 0x6b, 0xb5, 0x84, 0xab, 0x44, 0x2a, 0xcc, 0x0f, 0xf0, 0x54, 0x8f, 0x87,
	0x99, 0xc1, 0x3c, 0xa6, 0x66, 0x22, 0x4b, 0xec, 0x25, 0x66, 0xe3, 0x66, 0xaa, 0x5f, 0xe2, 0xa1,
	0x3f, 0x2d, 0x68, 0x15, 0x29, 0x92, 0x7d, 0x68, 0x0e, 0x55, 0x43, 0x5d, 0x26, 0xe1, 0x10, 0x63,
	0x33, 0x4f, 0x79, 0x48, 0xa7, 0x89, 0x09, 0x34, 0x17, 0xd2, 0x09, 0xca, 0x21, 0xa4, 0x0d, 0xb5,
	0x38, 0xcd, 0x42, 0x4a, 0xd1, 0x58, 0x2a, 0x2e, 0x3d, 0xf5, 0xa3, 0x31, 0xd7, 0xa4, 0x1a, 0x4e,
	0x0e, 0xd1, 0x25, 0xf1, 0x43, 0x34, 0xb5, 0xd3, 0x67, 0x53, 0xd3, 0x1b, 0xa1, 0xfa, 0xb2, 0x36,
	0xab, 0xa9, 0xb6, 0xbb, 0xdf, 0x2a, 0xb0, 0x79, 0x6d, 0x96, 0xaf, 0xa3, 0x77, 0xef, 0xd1, 0x55,
	0x9f, 0xdc, 0x40, 0xfb, 0x0c, 0x65, 0xc9, 0xda, 0x24, 0xbb, 0xf6, 0xdf, 0x17, 0x71, 0x67, 0xcf,
	0x7e, 0x60, 0xd3, 0xd2, 0x15, 0x72, 0x91, 0xad, 0xd5, 0x85, 0x6b, 0xa4, 0x6d, 0x97, 0xae, 0xdb,
	0xce, 0x23, 0xbb, 0x7c, 0xbf, 0xd1, 0x95, 0x03, 0x8b, 0x1c, 0xc1, 0x7a, 0xbe, 0x91, 0xc8, 0x96,
	0x5d, 0xb2, 0x47, 0x3a, 0xdb, 0x76, 0x59, 0xb7, 0xa9, 0x0f, 0xbc, 0xb6, 0x08, 0x85, 0x9a, 0x59,
	0x84, 0x35, 0x5b, 0xff, 0x69, 0x3a, 0x2d, 0xbb, 0xb0, 0x20, 0xe9, 0xca, 0xb0, 0xa6, 0xff, 0x45,
	0x6f, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0xf2, 0xd5, 0xa0, 0x69, 0xab, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SmoothieRunnerAPIClient is the client API for SmoothieRunnerAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SmoothieRunnerAPIClient interface {
	GetProblemTestDataHash(ctx context.Context, in *ProblemTestDataHashRequest, opts ...grpc.CallOption) (*ProblemTestDataHashResponse, error)
	UploadProblemTestData(ctx context.Context, opts ...grpc.CallOption) (SmoothieRunnerAPI_UploadProblemTestDataClient, error)
	TestSolution(ctx context.Context, opts ...grpc.CallOption) (SmoothieRunnerAPI_TestSolutionClient, error)
	Health(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ServiceHealth, error)
}

type smoothieRunnerAPIClient struct {
	cc *grpc.ClientConn
}

func NewSmoothieRunnerAPIClient(cc *grpc.ClientConn) SmoothieRunnerAPIClient {
	return &smoothieRunnerAPIClient{cc}
}

func (c *smoothieRunnerAPIClient) GetProblemTestDataHash(ctx context.Context, in *ProblemTestDataHashRequest, opts ...grpc.CallOption) (*ProblemTestDataHashResponse, error) {
	out := new(ProblemTestDataHashResponse)
	err := c.cc.Invoke(ctx, "/SmoothieRunnerAPI/GetProblemTestDataHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smoothieRunnerAPIClient) UploadProblemTestData(ctx context.Context, opts ...grpc.CallOption) (SmoothieRunnerAPI_UploadProblemTestDataClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SmoothieRunnerAPI_serviceDesc.Streams[0], "/SmoothieRunnerAPI/UploadProblemTestData", opts...)
	if err != nil {
		return nil, err
	}
	x := &smoothieRunnerAPIUploadProblemTestDataClient{stream}
	return x, nil
}

type SmoothieRunnerAPI_UploadProblemTestDataClient interface {
	Send(*UploadTestDataRequest) error
	CloseAndRecv() (*UploadTestDataResponse, error)
	grpc.ClientStream
}

type smoothieRunnerAPIUploadProblemTestDataClient struct {
	grpc.ClientStream
}

func (x *smoothieRunnerAPIUploadProblemTestDataClient) Send(m *UploadTestDataRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *smoothieRunnerAPIUploadProblemTestDataClient) CloseAndRecv() (*UploadTestDataResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadTestDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *smoothieRunnerAPIClient) TestSolution(ctx context.Context, opts ...grpc.CallOption) (SmoothieRunnerAPI_TestSolutionClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SmoothieRunnerAPI_serviceDesc.Streams[1], "/SmoothieRunnerAPI/TestSolution", opts...)
	if err != nil {
		return nil, err
	}
	x := &smoothieRunnerAPITestSolutionClient{stream}
	return x, nil
}

type SmoothieRunnerAPI_TestSolutionClient interface {
	Send(*TestSolutionRequest) error
	Recv() (*TestSolutionResponse, error)
	grpc.ClientStream
}

type smoothieRunnerAPITestSolutionClient struct {
	grpc.ClientStream
}

func (x *smoothieRunnerAPITestSolutionClient) Send(m *TestSolutionRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *smoothieRunnerAPITestSolutionClient) Recv() (*TestSolutionResponse, error) {
	m := new(TestSolutionResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *smoothieRunnerAPIClient) Health(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ServiceHealth, error) {
	out := new(ServiceHealth)
	err := c.cc.Invoke(ctx, "/SmoothieRunnerAPI/Health", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SmoothieRunnerAPIServer is the server API for SmoothieRunnerAPI service.
type SmoothieRunnerAPIServer interface {
	GetProblemTestDataHash(context.Context, *ProblemTestDataHashRequest) (*ProblemTestDataHashResponse, error)
	UploadProblemTestData(SmoothieRunnerAPI_UploadProblemTestDataServer) error
	TestSolution(SmoothieRunnerAPI_TestSolutionServer) error
	Health(context.Context, *Empty) (*ServiceHealth, error)
}

// UnimplementedSmoothieRunnerAPIServer can be embedded to have forward compatible implementations.
type UnimplementedSmoothieRunnerAPIServer struct {
}

func (*UnimplementedSmoothieRunnerAPIServer) GetProblemTestDataHash(ctx context.Context, req *ProblemTestDataHashRequest) (*ProblemTestDataHashResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProblemTestDataHash not implemented")
}
func (*UnimplementedSmoothieRunnerAPIServer) UploadProblemTestData(srv SmoothieRunnerAPI_UploadProblemTestDataServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadProblemTestData not implemented")
}
func (*UnimplementedSmoothieRunnerAPIServer) TestSolution(srv SmoothieRunnerAPI_TestSolutionServer) error {
	return status.Errorf(codes.Unimplemented, "method TestSolution not implemented")
}
func (*UnimplementedSmoothieRunnerAPIServer) Health(ctx context.Context, req *Empty) (*ServiceHealth, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Health not implemented")
}

func RegisterSmoothieRunnerAPIServer(s *grpc.Server, srv SmoothieRunnerAPIServer) {
	s.RegisterService(&_SmoothieRunnerAPI_serviceDesc, srv)
}

func _SmoothieRunnerAPI_GetProblemTestDataHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProblemTestDataHashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmoothieRunnerAPIServer).GetProblemTestDataHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SmoothieRunnerAPI/GetProblemTestDataHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmoothieRunnerAPIServer).GetProblemTestDataHash(ctx, req.(*ProblemTestDataHashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SmoothieRunnerAPI_UploadProblemTestData_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SmoothieRunnerAPIServer).UploadProblemTestData(&smoothieRunnerAPIUploadProblemTestDataServer{stream})
}

type SmoothieRunnerAPI_UploadProblemTestDataServer interface {
	SendAndClose(*UploadTestDataResponse) error
	Recv() (*UploadTestDataRequest, error)
	grpc.ServerStream
}

type smoothieRunnerAPIUploadProblemTestDataServer struct {
	grpc.ServerStream
}

func (x *smoothieRunnerAPIUploadProblemTestDataServer) SendAndClose(m *UploadTestDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *smoothieRunnerAPIUploadProblemTestDataServer) Recv() (*UploadTestDataRequest, error) {
	m := new(UploadTestDataRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _SmoothieRunnerAPI_TestSolution_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SmoothieRunnerAPIServer).TestSolution(&smoothieRunnerAPITestSolutionServer{stream})
}

type SmoothieRunnerAPI_TestSolutionServer interface {
	Send(*TestSolutionResponse) error
	Recv() (*TestSolutionRequest, error)
	grpc.ServerStream
}

type smoothieRunnerAPITestSolutionServer struct {
	grpc.ServerStream
}

func (x *smoothieRunnerAPITestSolutionServer) Send(m *TestSolutionResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *smoothieRunnerAPITestSolutionServer) Recv() (*TestSolutionRequest, error) {
	m := new(TestSolutionRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _SmoothieRunnerAPI_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmoothieRunnerAPIServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SmoothieRunnerAPI/Health",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmoothieRunnerAPIServer).Health(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _SmoothieRunnerAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "SmoothieRunnerAPI",
	HandlerType: (*SmoothieRunnerAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProblemTestDataHash",
			Handler:    _SmoothieRunnerAPI_GetProblemTestDataHash_Handler,
		},
		{
			MethodName: "Health",
			Handler:    _SmoothieRunnerAPI_Health_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadProblemTestData",
			Handler:       _SmoothieRunnerAPI_UploadProblemTestData_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "TestSolution",
			Handler:       _SmoothieRunnerAPI_TestSolution_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "runner/smoothie-runner.proto",
}
