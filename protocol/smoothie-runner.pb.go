// Code generated by protoc-gen-go. DO NOT EDIT.
// source: smoothie-runner.proto

package smoothie_runner

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type TestSolutionRequest struct {
	Solution              *Solution `protobuf:"bytes,1,opt,name=solution,proto3" json:"solution,omitempty"`
	TestBatchEvenIfFailed bool      `protobuf:"varint,2,opt,name=testBatchEvenIfFailed,proto3" json:"testBatchEvenIfFailed,omitempty"`
	CancelTesting         bool      `protobuf:"varint,3,opt,name=cancelTesting,proto3" json:"cancelTesting,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}  `json:"-"`
	XXX_unrecognized      []byte    `json:"-"`
	XXX_sizecache         int32     `json:"-"`
}

func (m *TestSolutionRequest) Reset()         { *m = TestSolutionRequest{} }
func (m *TestSolutionRequest) String() string { return proto.CompactTextString(m) }
func (*TestSolutionRequest) ProtoMessage()    {}
func (*TestSolutionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0996a7483c857121, []int{0}
}

func (m *TestSolutionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TestSolutionRequest.Unmarshal(m, b)
}
func (m *TestSolutionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TestSolutionRequest.Marshal(b, m, deterministic)
}
func (m *TestSolutionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestSolutionRequest.Merge(m, src)
}
func (m *TestSolutionRequest) XXX_Size() int {
	return xxx_messageInfo_TestSolutionRequest.Size(m)
}
func (m *TestSolutionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TestSolutionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TestSolutionRequest proto.InternalMessageInfo

func (m *TestSolutionRequest) GetSolution() *Solution {
	if m != nil {
		return m.Solution
	}
	return nil
}

func (m *TestSolutionRequest) GetTestBatchEvenIfFailed() bool {
	if m != nil {
		return m.TestBatchEvenIfFailed
	}
	return false
}

func (m *TestSolutionRequest) GetCancelTesting() bool {
	if m != nil {
		return m.CancelTesting
	}
	return false
}

type Solution struct {
	Problem              *Problem `protobuf:"bytes,1,opt,name=problem,proto3" json:"problem,omitempty"`
	Language             string   `protobuf:"bytes,2,opt,name=language,proto3" json:"language,omitempty"`
	Code                 string   `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Solution) Reset()         { *m = Solution{} }
func (m *Solution) String() string { return proto.CompactTextString(m) }
func (*Solution) ProtoMessage()    {}
func (*Solution) Descriptor() ([]byte, []int) {
	return fileDescriptor_0996a7483c857121, []int{1}
}

func (m *Solution) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Solution.Unmarshal(m, b)
}
func (m *Solution) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Solution.Marshal(b, m, deterministic)
}
func (m *Solution) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Solution.Merge(m, src)
}
func (m *Solution) XXX_Size() int {
	return xxx_messageInfo_Solution.Size(m)
}
func (m *Solution) XXX_DiscardUnknown() {
	xxx_messageInfo_Solution.DiscardUnknown(m)
}

var xxx_messageInfo_Solution proto.InternalMessageInfo

func (m *Solution) GetProblem() *Problem {
	if m != nil {
		return m.Problem
	}
	return nil
}

func (m *Solution) GetLanguage() string {
	if m != nil {
		return m.Language
	}
	return ""
}

func (m *Solution) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

type Problem struct {
	TestBatches          []*ProblemBatch `protobuf:"bytes,1,rep,name=testBatches,proto3" json:"testBatches,omitempty"`
	ProblemID            int64           `protobuf:"varint,2,opt,name=problemID,proto3" json:"problemID,omitempty"`
	TestCasesHashCode    int64           `protobuf:"varint,3,opt,name=testCasesHashCode,proto3" json:"testCasesHashCode,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Problem) Reset()         { *m = Problem{} }
func (m *Problem) String() string { return proto.CompactTextString(m) }
func (*Problem) ProtoMessage()    {}
func (*Problem) Descriptor() ([]byte, []int) {
	return fileDescriptor_0996a7483c857121, []int{2}
}

func (m *Problem) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Problem.Unmarshal(m, b)
}
func (m *Problem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Problem.Marshal(b, m, deterministic)
}
func (m *Problem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Problem.Merge(m, src)
}
func (m *Problem) XXX_Size() int {
	return xxx_messageInfo_Problem.Size(m)
}
func (m *Problem) XXX_DiscardUnknown() {
	xxx_messageInfo_Problem.DiscardUnknown(m)
}

var xxx_messageInfo_Problem proto.InternalMessageInfo

func (m *Problem) GetTestBatches() []*ProblemBatch {
	if m != nil {
		return m.TestBatches
	}
	return nil
}

func (m *Problem) GetProblemID() int64 {
	if m != nil {
		return m.ProblemID
	}
	return 0
}

func (m *Problem) GetTestCasesHashCode() int64 {
	if m != nil {
		return m.TestCasesHashCode
	}
	return 0
}

type ProblemBatch struct {
	Cases                []*ProblemBatchCase `protobuf:"bytes,1,rep,name=cases,proto3" json:"cases,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *ProblemBatch) Reset()         { *m = ProblemBatch{} }
func (m *ProblemBatch) String() string { return proto.CompactTextString(m) }
func (*ProblemBatch) ProtoMessage()    {}
func (*ProblemBatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_0996a7483c857121, []int{3}
}

func (m *ProblemBatch) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProblemBatch.Unmarshal(m, b)
}
func (m *ProblemBatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProblemBatch.Marshal(b, m, deterministic)
}
func (m *ProblemBatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProblemBatch.Merge(m, src)
}
func (m *ProblemBatch) XXX_Size() int {
	return xxx_messageInfo_ProblemBatch.Size(m)
}
func (m *ProblemBatch) XXX_DiscardUnknown() {
	xxx_messageInfo_ProblemBatch.DiscardUnknown(m)
}

var xxx_messageInfo_ProblemBatch proto.InternalMessageInfo

func (m *ProblemBatch) GetCases() []*ProblemBatchCase {
	if m != nil {
		return m.Cases
	}
	return nil
}

type ProblemBatchCase struct {
	CorrectAnswer        string   `protobuf:"bytes,1,opt,name=correctAnswer,proto3" json:"correctAnswer,omitempty"`
	TimeLimit            float64  `protobuf:"fixed64,2,opt,name=timeLimit,proto3" json:"timeLimit,omitempty"`
	MemLimit             float64  `protobuf:"fixed64,3,opt,name=memLimit,proto3" json:"memLimit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProblemBatchCase) Reset()         { *m = ProblemBatchCase{} }
func (m *ProblemBatchCase) String() string { return proto.CompactTextString(m) }
func (*ProblemBatchCase) ProtoMessage()    {}
func (*ProblemBatchCase) Descriptor() ([]byte, []int) {
	return fileDescriptor_0996a7483c857121, []int{4}
}

func (m *ProblemBatchCase) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProblemBatchCase.Unmarshal(m, b)
}
func (m *ProblemBatchCase) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProblemBatchCase.Marshal(b, m, deterministic)
}
func (m *ProblemBatchCase) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProblemBatchCase.Merge(m, src)
}
func (m *ProblemBatchCase) XXX_Size() int {
	return xxx_messageInfo_ProblemBatchCase.Size(m)
}
func (m *ProblemBatchCase) XXX_DiscardUnknown() {
	xxx_messageInfo_ProblemBatchCase.DiscardUnknown(m)
}

var xxx_messageInfo_ProblemBatchCase proto.InternalMessageInfo

func (m *ProblemBatchCase) GetCorrectAnswer() string {
	if m != nil {
		return m.CorrectAnswer
	}
	return ""
}

func (m *ProblemBatchCase) GetTimeLimit() float64 {
	if m != nil {
		return m.TimeLimit
	}
	return 0
}

func (m *ProblemBatchCase) GetMemLimit() float64 {
	if m != nil {
		return m.MemLimit
	}
	return 0
}

type TestSolutionResponse struct {
	TestCaseResult       *TestCaseResult `protobuf:"bytes,1,opt,name=testCaseResult,proto3" json:"testCaseResult,omitempty"`
	CompletedTesting     bool            `protobuf:"varint,2,opt,name=completedTesting,proto3" json:"completedTesting,omitempty"`
	CompileError         string          `protobuf:"bytes,3,opt,name=compileError,proto3" json:"compileError,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *TestSolutionResponse) Reset()         { *m = TestSolutionResponse{} }
func (m *TestSolutionResponse) String() string { return proto.CompactTextString(m) }
func (*TestSolutionResponse) ProtoMessage()    {}
func (*TestSolutionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0996a7483c857121, []int{5}
}

func (m *TestSolutionResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TestSolutionResponse.Unmarshal(m, b)
}
func (m *TestSolutionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TestSolutionResponse.Marshal(b, m, deterministic)
}
func (m *TestSolutionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestSolutionResponse.Merge(m, src)
}
func (m *TestSolutionResponse) XXX_Size() int {
	return xxx_messageInfo_TestSolutionResponse.Size(m)
}
func (m *TestSolutionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TestSolutionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TestSolutionResponse proto.InternalMessageInfo

func (m *TestSolutionResponse) GetTestCaseResult() *TestCaseResult {
	if m != nil {
		return m.TestCaseResult
	}
	return nil
}

func (m *TestSolutionResponse) GetCompletedTesting() bool {
	if m != nil {
		return m.CompletedTesting
	}
	return false
}

func (m *TestSolutionResponse) GetCompileError() string {
	if m != nil {
		return m.CompileError
	}
	return ""
}

type TestCaseResult struct {
	BatchNumber          int64    `protobuf:"varint,1,opt,name=batchNumber,proto3" json:"batchNumber,omitempty"`
	CaseNumber           int64    `protobuf:"varint,2,opt,name=caseNumber,proto3" json:"caseNumber,omitempty"`
	Result               string   `protobuf:"bytes,3,opt,name=result,proto3" json:"result,omitempty"`
	ResultInfo           string   `protobuf:"bytes,4,opt,name=resultInfo,proto3" json:"resultInfo,omitempty"`
	Time                 float64  `protobuf:"fixed64,5,opt,name=time,proto3" json:"time,omitempty"`
	MemUsage             float64  `protobuf:"fixed64,6,opt,name=memUsage,proto3" json:"memUsage,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TestCaseResult) Reset()         { *m = TestCaseResult{} }
func (m *TestCaseResult) String() string { return proto.CompactTextString(m) }
func (*TestCaseResult) ProtoMessage()    {}
func (*TestCaseResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_0996a7483c857121, []int{6}
}

func (m *TestCaseResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TestCaseResult.Unmarshal(m, b)
}
func (m *TestCaseResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TestCaseResult.Marshal(b, m, deterministic)
}
func (m *TestCaseResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestCaseResult.Merge(m, src)
}
func (m *TestCaseResult) XXX_Size() int {
	return xxx_messageInfo_TestCaseResult.Size(m)
}
func (m *TestCaseResult) XXX_DiscardUnknown() {
	xxx_messageInfo_TestCaseResult.DiscardUnknown(m)
}

var xxx_messageInfo_TestCaseResult proto.InternalMessageInfo

func (m *TestCaseResult) GetBatchNumber() int64 {
	if m != nil {
		return m.BatchNumber
	}
	return 0
}

func (m *TestCaseResult) GetCaseNumber() int64 {
	if m != nil {
		return m.CaseNumber
	}
	return 0
}

func (m *TestCaseResult) GetResult() string {
	if m != nil {
		return m.Result
	}
	return ""
}

func (m *TestCaseResult) GetResultInfo() string {
	if m != nil {
		return m.ResultInfo
	}
	return ""
}

func (m *TestCaseResult) GetTime() float64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *TestCaseResult) GetMemUsage() float64 {
	if m != nil {
		return m.MemUsage
	}
	return 0
}

func init() {
	proto.RegisterType((*TestSolutionRequest)(nil), "TestSolutionRequest")
	proto.RegisterType((*Solution)(nil), "Solution")
	proto.RegisterType((*Problem)(nil), "Problem")
	proto.RegisterType((*ProblemBatch)(nil), "ProblemBatch")
	proto.RegisterType((*ProblemBatchCase)(nil), "ProblemBatchCase")
	proto.RegisterType((*TestSolutionResponse)(nil), "TestSolutionResponse")
	proto.RegisterType((*TestCaseResult)(nil), "TestCaseResult")
}

func init() { proto.RegisterFile("smoothie-runner.proto", fileDescriptor_0996a7483c857121) }

var fileDescriptor_0996a7483c857121 = []byte{
	// 505 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x53, 0xed, 0x6e, 0xd3, 0x30,
	0x14, 0xc5, 0x64, 0x1f, 0xcd, 0x6d, 0x37, 0x56, 0xb3, 0xa2, 0x68, 0x42, 0xa8, 0xb2, 0x40, 0x54,
	0x08, 0x02, 0x2a, 0x48, 0xfb, 0x5d, 0xc6, 0x10, 0x95, 0x10, 0x9a, 0xbc, 0xc1, 0x4f, 0xa4, 0x34,
	0xbd, 0x6b, 0x23, 0x25, 0x76, 0xb1, 0x1d, 0x78, 0x03, 0x9e, 0x81, 0x7f, 0xbc, 0x07, 0x4f, 0x87,
	0xec, 0x38, 0x59, 0xb2, 0xf5, 0x9f, 0xef, 0x39, 0x27, 0x39, 0xd7, 0xc7, 0xf7, 0xc2, 0x48, 0x17,
	0x52, 0x9a, 0x75, 0x86, 0xaf, 0x54, 0x29, 0x04, 0xaa, 0x78, 0xa3, 0xa4, 0x91, 0xec, 0x0f, 0x81,
	0x87, 0x57, 0xa8, 0xcd, 0xa5, 0xcc, 0x4b, 0x93, 0x49, 0xc1, 0xf1, 0x47, 0x89, 0xda, 0xd0, 0x67,
	0xd0, 0xd3, 0x1e, 0x8a, 0xc8, 0x98, 0x4c, 0xfa, 0xd3, 0x30, 0x6e, 0x34, 0x0d, 0x45, 0xdf, 0xc1,
	0xc8, 0xa0, 0x36, 0xef, 0x13, 0x93, 0xae, 0xcf, 0x7f, 0xa2, 0x98, 0x5f, 0x7f, 0x4c, 0xb2, 0x1c,
	0x97, 0xd1, 0xfd, 0x31, 0x99, 0xf4, 0xf8, 0x76, 0x92, 0x3e, 0x85, 0x83, 0x34, 0x11, 0x29, 0xe6,
	0xd6, 0x39, 0x13, 0xab, 0x28, 0x70, 0xea, 0x2e, 0xc8, 0xbe, 0x43, 0xaf, 0x76, 0xa4, 0x0c, 0xf6,
	0x37, 0x4a, 0x2e, 0x72, 0x2c, 0x7c, 0x37, 0xbd, 0xf8, 0xa2, 0xaa, 0x79, 0x4d, 0xd0, 0x13, 0xe8,
	0xe5, 0x89, 0x58, 0x95, 0xc9, 0x0a, 0x9d, 0x7d, 0xc8, 0x9b, 0x9a, 0x52, 0xd8, 0x49, 0xe5, 0x12,
	0x9d, 0x51, 0xc8, 0xdd, 0x99, 0xfd, 0x26, 0xb0, 0xef, 0x7f, 0x42, 0x5f, 0x43, 0xbf, 0x69, 0x15,
	0x75, 0x44, 0xc6, 0xc1, 0xa4, 0x3f, 0x3d, 0xa8, 0x3d, 0x1c, 0xcc, 0xdb, 0x0a, 0xfa, 0x18, 0x42,
	0xef, 0x3b, 0xff, 0xe0, 0xdc, 0x02, 0x7e, 0x03, 0xd0, 0x97, 0x30, 0xb4, 0xe2, 0xb3, 0x44, 0xa3,
	0xfe, 0x94, 0xe8, 0xf5, 0x59, 0xed, 0x1d, 0xf0, 0xbb, 0x04, 0x3b, 0x85, 0x41, 0xdb, 0x88, 0x3e,
	0x87, 0xdd, 0xd4, 0x0a, 0x7c, 0x1b, 0xc3, 0x4e, 0x1b, 0xf6, 0x53, 0x5e, 0xf1, 0x4c, 0xc1, 0xd1,
	0x6d, 0xca, 0x65, 0x2b, 0x95, 0xc2, 0xd4, 0xcc, 0x84, 0xfe, 0x85, 0xca, 0xe5, 0x15, 0xf2, 0x2e,
	0x68, 0xdb, 0x37, 0x59, 0x81, 0x9f, 0xb3, 0x22, 0x33, 0xae, 0x7d, 0xc2, 0x6f, 0x00, 0x9b, 0x64,
	0x81, 0x45, 0x45, 0x06, 0x8e, 0x6c, 0x6a, 0xf6, 0x97, 0xc0, 0x71, 0x77, 0x60, 0xf4, 0x46, 0x0a,
	0x8d, 0xf4, 0x14, 0x0e, 0xeb, 0xab, 0x71, 0xd4, 0x65, 0x6e, 0xfc, 0x4b, 0x3d, 0x88, 0xaf, 0x3a,
	0x30, 0xbf, 0x25, 0xa3, 0x2f, 0xe0, 0x28, 0x95, 0xc5, 0x26, 0x47, 0x83, 0xcb, 0x7a, 0x20, 0xaa,
	0xf1, 0xb9, 0x83, 0x53, 0x06, 0x03, 0x8b, 0x65, 0x39, 0x9e, 0x2b, 0x25, 0x95, 0x7f, 0xcf, 0x0e,
	0xc6, 0xfe, 0x11, 0x38, 0xec, 0x5a, 0xd2, 0x31, 0xf4, 0x17, 0x36, 0xa1, 0x2f, 0x65, 0xb1, 0xf0,
	0x91, 0x04, 0xbc, 0x0d, 0xd1, 0x27, 0x00, 0x36, 0x53, 0x2f, 0xa8, 0x1e, 0xb4, 0x85, 0xd0, 0x47,
	0xb0, 0xa7, 0xaa, 0x5b, 0x55, 0x96, 0xbe, 0xb2, 0xdf, 0x55, 0xa7, 0xb9, 0xb8, 0x96, 0xd1, 0x8e,
	0xe3, 0x5a, 0x88, 0x1d, 0x3c, 0x9b, 0x6b, 0xb4, 0xeb, 0x62, 0x74, 0x67, 0x1f, 0xef, 0x57, 0x6d,
	0x07, 0x75, 0xaf, 0x89, 0xd7, 0xd5, 0xd3, 0x6f, 0x30, 0xbc, 0xf4, 0x8b, 0xca, 0xdd, 0x9e, 0xce,
	0x2e, 0xe6, 0x74, 0x06, 0x83, 0x76, 0xe4, 0xf4, 0x38, 0xde, 0xb2, 0xb2, 0x27, 0xa3, 0x78, 0xdb,
	0xbb, 0xb0, 0x7b, 0x13, 0xf2, 0x86, 0x2c, 0xf6, 0xdc, 0xba, 0xbf, 0xfd, 0x1f, 0x00, 0x00, 0xff,
	0xff, 0x18, 0x38, 0xa7, 0x41, 0x07, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SmoothieRunnerAPIClient is the client API for SmoothieRunnerAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SmoothieRunnerAPIClient interface {
	TestSolution(ctx context.Context, opts ...grpc.CallOption) (SmoothieRunnerAPI_TestSolutionClient, error)
}

type smoothieRunnerAPIClient struct {
	cc *grpc.ClientConn
}

func NewSmoothieRunnerAPIClient(cc *grpc.ClientConn) SmoothieRunnerAPIClient {
	return &smoothieRunnerAPIClient{cc}
}

func (c *smoothieRunnerAPIClient) TestSolution(ctx context.Context, opts ...grpc.CallOption) (SmoothieRunnerAPI_TestSolutionClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SmoothieRunnerAPI_serviceDesc.Streams[0], "/SmoothieRunnerAPI/TestSolution", opts...)
	if err != nil {
		return nil, err
	}
	x := &smoothieRunnerAPITestSolutionClient{stream}
	return x, nil
}

type SmoothieRunnerAPI_TestSolutionClient interface {
	Send(*TestSolutionRequest) error
	Recv() (*TestSolutionResponse, error)
	grpc.ClientStream
}

type smoothieRunnerAPITestSolutionClient struct {
	grpc.ClientStream
}

func (x *smoothieRunnerAPITestSolutionClient) Send(m *TestSolutionRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *smoothieRunnerAPITestSolutionClient) Recv() (*TestSolutionResponse, error) {
	m := new(TestSolutionResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SmoothieRunnerAPIServer is the server API for SmoothieRunnerAPI service.
type SmoothieRunnerAPIServer interface {
	TestSolution(SmoothieRunnerAPI_TestSolutionServer) error
}

// UnimplementedSmoothieRunnerAPIServer can be embedded to have forward compatible implementations.
type UnimplementedSmoothieRunnerAPIServer struct {
}

func (*UnimplementedSmoothieRunnerAPIServer) TestSolution(srv SmoothieRunnerAPI_TestSolutionServer) error {
	return status.Errorf(codes.Unimplemented, "method TestSolution not implemented")
}

func RegisterSmoothieRunnerAPIServer(s *grpc.Server, srv SmoothieRunnerAPIServer) {
	s.RegisterService(&_SmoothieRunnerAPI_serviceDesc, srv)
}

func _SmoothieRunnerAPI_TestSolution_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SmoothieRunnerAPIServer).TestSolution(&smoothieRunnerAPITestSolutionServer{stream})
}

type SmoothieRunnerAPI_TestSolutionServer interface {
	Send(*TestSolutionResponse) error
	Recv() (*TestSolutionRequest, error)
	grpc.ServerStream
}

type smoothieRunnerAPITestSolutionServer struct {
	grpc.ServerStream
}

func (x *smoothieRunnerAPITestSolutionServer) Send(m *TestSolutionResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *smoothieRunnerAPITestSolutionServer) Recv() (*TestSolutionRequest, error) {
	m := new(TestSolutionRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _SmoothieRunnerAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "SmoothieRunnerAPI",
	HandlerType: (*SmoothieRunnerAPIServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "TestSolution",
			Handler:       _SmoothieRunnerAPI_TestSolution_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "smoothie-runner.proto",
}
